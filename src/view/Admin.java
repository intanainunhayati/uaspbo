/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import com.toedter.calendar.JDateChooser;
import java.util.Calendar;
import controller.Database;
import dao.javaconnect;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import model.Mahasiswa;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import javax.swing.*;
import net.proteanit.sql.DbUtils;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//import au.com.bytecode.opencsv.CSVWriter; // Import the CSVWriter class
import java.io.FileWriter; 
import com.opencsv.CSVWriter;
import java.text.SimpleDateFormat;
/**
 *
 * @author Lenovo
 */
public class Admin extends javax.swing.JFrame {
    
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    public Admin() {
        initComponents();
        conn = javaconnect.ConnecrDb();
        data_mahasiswa();
        
        // Mengatur frame agar dapat diubah ukurannya dan muncul di tengah layar
        this.setSize(1284, 700); // Ukuran awal frame 1284, 612 piksel
        this.setResizable(true); // Memungkinkan frame untuk bisa diperbesar dan diperkecil
        this.setLocationRelativeTo(null); // Menempatkan frame di tengah layar saat dijalankan
    }
    
    private void data_mahasiswa() {
        try {
        String query = "select * from mahasiswa";
        pst = conn.prepareStatement(query);
        rs = pst.executeQuery();
        mahasiswa.setModel(DbUtils.resultSetToTableModel(rs));
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCalModel1 = new com.jcalendar.model.JCalModel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nimTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dosenComboBox = new javax.swing.JComboBox<>();
        namaTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lakiRadioButton = new javax.swing.JRadioButton();
        perempuanRadioButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        sesi = new com.toedter.calendar.JDateChooser();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mahasiswa = new javax.swing.JTable();
        simpanButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        hapusButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        export = new javax.swing.JButton();
        exportcsv = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(205, 232, 229));

        jPanel3.setBackground(new java.awt.Color(205, 232, 229));

        jLabel1.setText("NIM:");

        nimTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nimTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("Dosen:");

        jLabel2.setText("Nama");

        dosenComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dr. Bony Parulian Josaphat, S.Si., M.Si.", "Retnaningsih, S.Si., M.E.", "Firdaus, MBA", "Liza Kurnia Sari, S.Si., M.Stat.", "Aisyah Fitri Yuniasih, S.S.T., S.E., M.Si." }));

        namaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("Sesi:");

        jLabel3.setText("Jenis Kelamin:");

        lakiRadioButton.setText("Laki-Laki");

        perempuanRadioButton.setText("Perempuan");

        jLabel4.setText("Email");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4))
                .addGap(98, 98, 98)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(namaTextField)
                    .addComponent(emailTextField)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(perempuanRadioButton)
                            .addComponent(lakiRadioButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(dosenComboBox, 0, 189, Short.MAX_VALUE)
                    .addComponent(sesi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(170, 170, 170))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addGap(146, 146, 146)
                    .addComponent(nimTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(170, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(namaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lakiRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(perempuanRadioButton)
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dosenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(sesi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(136, 136, 136))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(nimTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addContainerGap(426, Short.MAX_VALUE)))
        );

        mahasiswa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIM", "Nama", "Email", "Jenis Kelamin", "Dosen", "Sesi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mahasiswa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mahasiswaMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mahasiswaMouseExited(evt);
            }
        });
        jScrollPane2.setViewportView(mahasiswa);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );

        simpanButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        simpanButton.setText("Simpan");
        simpanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        hapusButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        hapusButton.setText("Delete");
        hapusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(77, 134, 156));
        jLabel5.setText("ADMIN");

        back.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        back.setForeground(new java.awt.Color(77, 134, 156));
        back.setText("BACK");
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        export.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        export.setText("Export .xls");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        exportcsv.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exportcsv.setText("Export csv");
        exportcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportcsvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(exportcsv)
                                .addGap(18, 18, 18)
                                .addComponent(export))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(hapusButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(simpanButton)
                                .addGap(504, 504, 504))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(26, 26, 26)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(157, 157, 157))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(51, 51, 51)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hapusButton)
                            .addComponent(editButton)
                            .addComponent(simpanButton)
                            .addComponent(export)
                            .addComponent(exportcsv))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(back)
                        .addGap(14, 14, 14))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void simpanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanButtonActionPerformed
        // TODO add your handling code here:
        Mahasiswa mhs = new Mahasiswa();
        mhs.setNim(nimTextField.getText());
        mhs.setNama(namaTextField.getText());
        mhs.setEmail(emailTextField.getText());

        if(lakiRadioButton.isSelected()) {
            mhs.setJenisKelamin("Laki-laki");
        }
        if(perempuanRadioButton.isSelected()) {
            mhs.setJenisKelamin("Perempuan");
        }
        
        mhs.setDosen(dosenComboBox.getSelectedItem().toString());
        
        /*
        if(senin.isSelected()) {
            mhs.setSesi("Senin");
        }
        if(selasa.isSelected()) {
            mhs.setSesi("Selasa");
        }
        if(rabu.isSelected()) {
            mhs.setSesi("Rabu");
        }
        if(kamis.isSelected()) {
            mhs.setSesi("Kamis");
        }*/
        
        // Mengambil nilai dari JDateChooser 'sesi'
        Date date = sesi.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        mhs.setSesi(sdf.format(date));

        try {
            Database db = new Database();
            db.tambahMahasiswa(mhs);
            loadTableData();
            JOptionPane.showMessageDialog(this, "Data saved successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
        }
    }//GEN-LAST:event_simpanButtonActionPerformed

    private void mahasiswaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mahasiswaMouseClicked
        // TODO add your handling code here:
        int selectedRow = mahasiswa.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) mahasiswa.getModel();
            nimTextField.setText(model.getValueAt(selectedRow, 0).toString());
            namaTextField.setText(model.getValueAt(selectedRow, 1).toString());
            emailTextField.setText(model.getValueAt(selectedRow, 2).toString());
            
            // Set gender radio buttons based on data
            if (model.getValueAt(selectedRow, 3).toString().equals("Laki-Laki")) {
                lakiRadioButton.setSelected(true);
            } else {
                perempuanRadioButton.setSelected(true);
            }
            
            dosenComboBox.setSelectedItem(model.getValueAt(selectedRow, 4).toString());
            
            String sesi = model.getValueAt(selectedRow, 5).toString();
            /* if (sesi.equals("Senin")) {
                senin.setSelected(true);
            } else if (sesi.equals("Selasa")) {
                selasa.setSelected(true);
            } else if (sesi.equals("Rabu")) {
                rabu.setSelected(true);
            } else if (sesi.equals("Kamis")) {
                kamis.setSelected(true);
            } */
            try {
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(sesi);
                this.sesi.setDate(date);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_mahasiswaMouseClicked

    private void mahasiswaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mahasiswaMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_mahasiswaMouseExited

    private void namaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaTextFieldActionPerformed

    private void nimTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nimTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nimTextFieldActionPerformed

    private void hapusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusButtonActionPerformed
        // TODO add your handling code here
        int selectedRow = mahasiswa.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) mahasiswa.getModel();
            String nim = model.getValueAt(selectedRow, 0).toString();
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Database db = new Database();
                    db.hapusMahasiswa(nim);
                    loadTableData();
                    JOptionPane.showMessageDialog(this, "Data deleted successfully!");
                    clearForm();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
                }
            }
            } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    }//GEN-LAST:event_hapusButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = mahasiswa.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) mahasiswa.getModel();
            String nim = model.getValueAt(selectedRow, 0).toString();
            String nama = namaTextField.getText();
            String email = emailTextField.getText();
            String jenisKelamin = lakiRadioButton.isSelected() ? "Laki-Laki" : "Perempuan";
            String dosen = (String) dosenComboBox.getSelectedItem();
            String sesi = new SimpleDateFormat("yyyy-MM-dd").format(this.sesi.getDate());
            /*String sesi = "";
            if (senin.isSelected()) {
                sesi = "Senin";
            } else if (selasa.isSelected()) {
                sesi = "Selasa";
            } else if (rabu.isSelected()) {
                sesi = "Rabu";
            } else if (kamis.isSelected()) {
                sesi = "Kamis";
            } */
            
            

            /*try {
                Database db = new Database();
                db.editMahasiswa(nim, nama, email, jenisKelamin, dosen, sesi); // Update database
                loadTableData();
                JOptionPane.showMessageDialog(this, "Data edited successfully!");
                clearForm(); // Clear form after update
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error editing data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        } */
            
            try {
            Database db = new Database();
            db.editMahasiswa(nim, nama, email, jenisKelamin, dosen, sesi); // Update database
            
            // Update the table model directly
            model.setValueAt(nim, selectedRow, 0);
            model.setValueAt(nama, selectedRow, 1);
            model.setValueAt(email, selectedRow, 2);
            model.setValueAt(jenisKelamin, selectedRow, 3);
            model.setValueAt(dosen, selectedRow, 4);
            model.setValueAt(sesi, selectedRow, 5);

            JOptionPane.showMessageDialog(this, "Data edited successfully!");
            clearForm(); // Clear form after update
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error editing data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to edit.");
    }
    }//GEN-LAST:event_editButtonActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        Dashboard dash = new Dashboard();
        dash.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backMouseClicked

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.showSaveDialog(this);
            File saveFile = jFileChooser.getSelectedFile();

            if (saveFile != null) {
                saveFile = new File(saveFile.toString() + ".xlsx");
                Workbook wb = new XSSFWorkbook();
                Sheet sheet = wb.createSheet("data konseling");

                org.apache.poi.ss.usermodel.Row rowCol = sheet.createRow(0);
                for (int i = 0; i < mahasiswa.getColumnCount(); i++) {
                    Cell cell = rowCol.createCell(i);
                    cell.setCellValue(mahasiswa.getColumnName(i));
                }

                for (int j = 0; j < mahasiswa.getRowCount(); j++) {
                    org.apache.poi.ss.usermodel.Row row = sheet.createRow(j + 1);
                    for (int k = 0; k < mahasiswa.getColumnCount(); k++) {
                        Cell cell = row.createCell(k);
                        if (mahasiswa.getValueAt(j, k) != null) {
                            cell.setCellValue(mahasiswa.getValueAt(j, k).toString());
                        }
                    }
                }
                FileOutputStream out = new FileOutputStream(new File(saveFile.toString()));
                wb.write(out);
                wb.close();
                out.close();
                openFile(saveFile.toString());
            } else {
                JOptionPane.showMessageDialog(null, "Dibatalkan");
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        } catch (IOException io) {
            System.out.println(io);
        }
    }//GEN-LAST:event_exportActionPerformed

    private void exportcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportcsvActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                if (!selectedFile.getName().endsWith(".csv")) {
                    selectedFile = new File(selectedFile.getAbsolutePath() + ".csv");
                }
                try (FileWriter fileWriter = new FileWriter(selectedFile)) {
                    try (CSVWriter csvWriter = new CSVWriter(fileWriter)) {
                        String[] header = {"NIM", "Nama", "Email", "Jenis Kelamin", "Dosen", "Sesi"};
                        csvWriter.writeNext(header);
                        for (int i = 0; i < mahasiswa.getRowCount(); i++) {
                            String[] data = new String[mahasiswa.getColumnCount()];
                            for (int j = 0; j < mahasiswa.getColumnCount(); j++) {
                                data[j] = mahasiswa.getValueAt(i, j).toString();
                            }
                            csvWriter.writeNext(data);
                        }
                    }
                    JOptionPane.showMessageDialog(this, "Data exported to CSV successfully!");
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error exporting to CSV: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportcsvActionPerformed
    
    public void openFile(String file) {
        try {
            File path = new File(file);
            Desktop.getDesktop().open(path);
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }
    
    private void clearForm() {
        nimTextField.setText("");
        namaTextField.setText("");
        emailTextField.setText("");
        lakiRadioButton.setSelected(false);
        perempuanRadioButton.setSelected(false);
        dosenComboBox.setSelectedIndex(0);
        sesi.setDate(null);  
    }
    
    private void loadTableData() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) mahasiswa.getModel();
        model.setRowCount(0); // Clear existing data

        Database db = new Database();
        ArrayList<Mahasiswa> mahasiswaList = db.getMahasiswaList();

        for (Mahasiswa mhs : mahasiswaList) {
            model.addRow(new Object[]{
                mhs.getNim(),
                mhs.getNama(),
                mhs.getEmail(),
                mhs.getJenisKelamin(),
                mhs.getDosen(),
                mhs.getSesi()
            });
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JComboBox<String> dosenComboBox;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton export;
    private javax.swing.JButton exportcsv;
    private javax.swing.JButton hapusButton;
    private com.jcalendar.model.JCalModel jCalModel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton lakiRadioButton;
    private javax.swing.JTable mahasiswa;
    private javax.swing.JTextField namaTextField;
    private javax.swing.JTextField nimTextField;
    private javax.swing.JRadioButton perempuanRadioButton;
    private com.toedter.calendar.JDateChooser sesi;
    private javax.swing.JButton simpanButton;
    // End of variables declaration//GEN-END:variables
}